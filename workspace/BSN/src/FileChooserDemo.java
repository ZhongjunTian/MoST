import java.io.*;
import java.util.Vector;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
/**
 * Class for handle data/video generated by VibMotion2 sotware and ,finally, obtain susequence of data/video from a stream of recorded data/video
 * @author Claudio Savaglio
 *
 */

@SuppressWarnings("serial")
public class FileChooserDemo extends JPanel implements ActionListener {
	static private final String newline = "\n";
	JButton openButton, extractButton, indexButton;
	JTextArea log;
	JFileChooser fc;
	File[] files;
	File[] files_extract;
	File file;
	Vector<Integer> index;


	public FileChooserDemo() {
		super(new BorderLayout());

		// Create the log first, because the action listeners
		// need to refer to it.
		log = new JTextArea(5, 20);
		log.setMargin(new Insets(5, 5, 5, 5));
		log.setEditable(false);
		JScrollPane logScrollPane = new JScrollPane(log);

		// Create a file chooser
		fc = new JFileChooser();
		fc.setMultiSelectionEnabled(true);
		fc.setFileFilter(new TxtFileFilter());


		openButton = new JButton("Fix-up a File...");
		openButton.addActionListener(this);

		extractButton = new JButton("Extract Data from File...");
		extractButton.addActionListener(this);

		indexButton = new JButton("Extract Index from File...");
		indexButton.addActionListener(this);
		
		
		// For layout purposes, put the buttons in a separate panel
		JPanel buttonPanel = new JPanel(); // use FlowLayout
		buttonPanel.add(openButton);
		buttonPanel.add(extractButton);
		buttonPanel.add(indexButton);
		

		// Add the buttons and the log to this panel.
		add(buttonPanel, BorderLayout.PAGE_START);
		add(logScrollPane, BorderLayout.CENTER);
	}

	@SuppressWarnings("unused")
	public void actionPerformed(ActionEvent e) {

		// Handle fix button action.
		if (e.getSource() == openButton) {
			int returnVal = fc.showOpenDialog(FileChooserDemo.this);

			if (returnVal == JFileChooser.APPROVE_OPTION) {
				files = fc.getSelectedFiles();
				log.append("Opening: " + files.length + "." + newline);
				try {
					First_last_Row g = new First_last_Row(files);
				} catch (IOException e0) {
					e0.printStackTrace();
				}
			} else {
				log.append("Open command cancelled by user." + newline);
			}
			log.setCaretPosition(log.getDocument().getLength());

			// Handle files_extract button action.
		} else if (e.getSource() == extractButton) {
			int returnVal = fc.showSaveDialog(FileChooserDemo.this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				files_extract = fc.getSelectedFiles();

				extract_Data e1;
				boolean primo = true;
				try {
					for (int w = 0; w < index.size() - 1; w = w + 2) {
						System.out.println("index size "+index.size());
						e1 = new extract_Data(index.elementAt(w),
								index.elementAt(w + 1), files_extract, primo,w,(index.size()));
						primo = false;
					}
				} catch (IOException ex) {
					ex.printStackTrace();
				}
				log.append("Extract: " + files_extract.length + "." + newline);
				log.append("COMPLETE");
			} else {
				log.append("Extract command cancelled by user." + newline);
			}
			log.setCaretPosition(log.getDocument().getLength());log.append("COMPLETE");
		} 
		// Handle files_index button action.
		else if (e.getSource() == indexButton) {
			int returnVal = fc.showSaveDialog(FileChooserDemo.this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				file = fc.getSelectedFile();
				try {
					extract_Index ei = new extract_Index(file);
					index = ei.getIndices();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				log.append("Indexing: " + file.getAbsolutePath() + "." + newline);
			} else {
				log.append("Indexing command cancelled by user." + newline);
			}
			log.setCaretPosition(log.getDocument().getLength());
		}
	
log.append("COMPLETE");
	}

	/** Returns an ImageIcon, or null if the path was invalid. */
	protected static ImageIcon createImageIcon(String path) {
		java.net.URL imgURL = FileChooserDemo.class.getResource(path);
		if (imgURL != null) {
			return new ImageIcon(imgURL);
		} else {
			System.err.println("Couldn't find file: " + path);
			return null;
		}
	}

	/**
	 * Create the GUI and show it. For thread safety, this method should be
	 * invoked from the event dispatch thread.
	 */
	private static void createAndShowGUI() {
		// Create and set up the window.
		JFrame frame = new JFrame("FileChooserDemo");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// Add content to the window.
		frame.add(new FileChooserDemo());

		// Display the window.
		frame.pack();
		frame.setVisible(true);
	}

	public static void main(String[] args) {

		// Schedule a job for the event dispatch thread:
		// creating and showing this application's GUI.
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				// Turn off metal's use of bold fonts
				UIManager.put("swing.boldMetal", Boolean.FALSE);
				createAndShowGUI();
			}
		});
	}
	/**
	 * Filter for choosing text files only
	 * @author Claudio Savaglio
	 *
	 */
	class TxtFileFilter extends FileFilter {

		  public boolean accept(File file) {
		    if (file.isDirectory()) return true;
		    String fname = file.getName().toLowerCase();
		    return fname.endsWith("txt");
		  }

		  public String getDescription() {
		    return "File di testo";
		  }
		}
}